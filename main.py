# bot.py
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import os
from dotenv import load_dotenv
import json  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è fallback, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
import psycopg2  # –ù–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Postgres
from psycopg2.extras import RealDictCursor  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∫–∞–∫ dict
from questions import questions

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')  # Connection string –æ—Ç Render
if not TOKEN:
    raise ValueError('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!')
if not DATABASE_URL:
    raise ValueError('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!')

bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—ç—à–∞ leaderboard (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
leaderboard_cache = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã leaderboard (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
def init_leaderboard_table():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS leaderboard (
            user_id VARCHAR(255) PRIMARY KEY,
            username VARCHAR(255) NOT NULL,
            score INTEGER DEFAULT 0
        )
    """)
    conn.commit()
    cursor.close()
    conn.close()
    print("–¢–∞–±–ª–∏—Ü–∞ leaderboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ leaderboard –∏–∑ –ë–î (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
def load_leaderboard():
    global leaderboard_cache
    if leaderboard_cache:
        return leaderboard_cache
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute("SELECT * FROM leaderboard ORDER BY score DESC")
    rows = cursor.fetchall()
    leaderboard_cache = {row['user_id']: dict(row) for row in rows}
    cursor.close()
    conn.close()
    return leaderboard_cache

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ leaderboard
def save_leaderboard_entry(user_id, username, score):
    global leaderboard_cache
    conn = get_db_connection()
    cursor = conn.cursor()
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º (UPSERT)
    cursor.execute("""
        INSERT INTO leaderboard (user_id, username, score)
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id) DO UPDATE SET
            username = EXCLUDED.username,
            score = GREATEST(leaderboard.score, EXCLUDED.score)
    """, (user_id, username, score))
    conn.commit()
    cursor.close()
    conn.close()
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    leaderboard_cache[user_id] = {'user_id': user_id, 'username': username, 'score': max(leaderboard_cache.get(user_id, {}).get('score', 0), score)}
    print(f"–û–±–Ω–æ–≤–ª—ë–Ω –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è {username}: {score}")

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
# (user_states, @bot.message_handler(commands=['start']), @bot.callback_query_handler, send_question, format_leaderboard)

# –í send_question, –≤ –∫–æ–Ω—Ü–µ –∫–≤–∏–∑–∞, –∑–∞–º–µ–Ω–∏—Ç–µ save_leaderboard –Ω–∞:
# username = bot.get_chat(user_id).username or f"User_{user_id}"
# score = state['score']
# save_leaderboard_entry(str(user_id), username, score)  # –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ leaderboard[str(user_id)] = ...

# –í format_leaderboard –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ load_leaderboard():
def format_leaderboard():
    lb = load_leaderboard()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    if not lb:
        return '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –ü—Ä–æ–π–¥–∏ –∫–≤–∏–∑, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥!'
    sorted_lb = sorted(lb.items(), key=lambda x: x[1]['score'], reverse=True)[:10]
    result = 'üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–¢–æ–ø-10):\n'
    for i, (user_id, data) in enumerate(sorted_lb, 1):
        result += f"{i}. {data['username']} ‚Äî {data['score']} –±–∞–ª–ª–æ–≤\n"
    return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    init_leaderboard_table()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É
    load_leaderboard()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –∫—ç—à
    bot.polling()